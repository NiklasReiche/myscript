(global List
    (class
        (field head)
        (field tail)
    )
)
(global Nil (create (class) []))

# Returns true if the given object is Nil
(global nil?
    (func [o]
        (= o Nil)
    )
)

# Constructs a new list from a head element and a tail list
# _, List -> List
(global cons
    (func [head tail]
        (create List [head tail])
    )
)

# Returns true if the given list contains the given element
# List -> Bool
(global contains?
    (func [lst element]
        (if (call nil? [lst])
            false
            (if (= element (field-get lst head))
                true
                (call contains? [(field-get lst tail) element])
            )
        )
    )
)

# Returns the number of elements in a given list
# List -> Num
(global length
    (func [lst]
        (if (call nil? [lst])
            0
            (+ 1 (call length [(field-get lst tail)]))
        )
    )
)

#(global zip ...)

(global map
    (func [lst f]
        (if (call nil? [lst])
            Nil
            (create List [(call f [(field-get lst head)])
                          (call map [(field-get lst tail) f])]
            )
        )
    )
)